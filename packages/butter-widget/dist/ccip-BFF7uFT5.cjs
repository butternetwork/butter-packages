"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const t=require("./index-Ds0dnP-7.cjs");class $ extends t.BaseError$2{constructor({callbackSelector:o,cause:a,data:n,extraData:f,sender:u,urls:r}){var c;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],(c=a.metaMessages)!=null&&c.length?"":[],"Offchain Gateway Call:",r&&["  Gateway URL(s):",...r.map(d=>`    ${t.getUrl$2(d)}`)],`  Sender: ${u}`,`  Data: ${n}`,`  Callback selector: ${o}`,`  Extra data: ${f}`].flat(),name:"OffchainLookupError"})}}class w extends t.BaseError$2{constructor({result:o,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${t.getUrl$2(a)}`,`Response: ${t.stringify$2(o)}`],name:"OffchainLookupResponseMalformedError"})}}class k extends t.BaseError$2{constructor({sender:o,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${o}`],name:"OffchainLookupSenderMismatchError"})}}const b="0x556f1830",h={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function E(i,{blockNumber:o,blockTag:a,data:n,to:f}){const{args:u}=t.decodeErrorResult$2({data:n,abi:[h]}),[r,c,d,p,s]=u,{ccipRead:e}=i,m=e&&typeof(e==null?void 0:e.request)=="function"?e.request:y;try{if(!t.isAddressEqual$1(f,r))throw new k({sender:r,to:f});const l=await m({data:d,sender:r,urls:c}),{data:g}=await t.call$2(i,{blockNumber:o,blockTag:a,data:t.concat$2([p,t.encodeAbiParameters$2([{type:"bytes"},{type:"bytes"}],[l,s])]),to:f});return g}catch(l){throw new $({callbackSelector:p,cause:l,data:n,extraData:s,sender:r,urls:c})}}async function y({data:i,sender:o,urls:a}){var f;let n=new Error("An unknown error occurred.");for(let u=0;u<a.length;u++){const r=a[u],c=r.includes("{data}")?"GET":"POST",d=c==="POST"?{data:i,sender:o}:void 0,p=c==="POST"?{"Content-Type":"application/json"}:{};try{const s=await fetch(r.replace("{sender}",o).replace("{data}",i),{body:JSON.stringify(d),headers:p,method:c});let e;if((f=s.headers.get("Content-Type"))!=null&&f.startsWith("application/json")?e=(await s.json()).data:e=await s.text(),!s.ok){n=new t.HttpRequestError$2({body:d,details:e!=null&&e.error?t.stringify$2(e.error):s.statusText,headers:s.headers,status:s.status,url:r});continue}if(!t.isHex$2(e)){n=new w({result:e,url:r});continue}return e}catch(s){n=new t.HttpRequestError$2({body:d,details:s.message,url:r})}}throw n}exports.ccipRequest=y;exports.offchainLookup=E;exports.offchainLookupAbiItem=h;exports.offchainLookupSignature=b;
